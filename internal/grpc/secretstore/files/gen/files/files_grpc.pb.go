// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: files/files.proto

package filesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Files_Add_FullMethodName       = "/files.Files/Add"
	Files_GetSecret_FullMethodName = "/files.Files/GetSecret"
	Files_Search_FullMethodName    = "/files.Files/Search"
	Files_Remove_FullMethodName    = "/files.Files/Remove"
)

// FilesClient is the client API for Files service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesClient interface {
	Add(ctx context.Context, in *FileAddRequest, opts ...grpc.CallOption) (*FileAddResponse, error)
	GetSecret(ctx context.Context, in *FileSecretRequest, opts ...grpc.CallOption) (*FileSecretResponse, error)
	Search(ctx context.Context, in *FileSearchRequest, opts ...grpc.CallOption) (*FileSearchResponse, error)
	Remove(ctx context.Context, in *FileRemoveRequest, opts ...grpc.CallOption) (*FileRemoveResponse, error)
}

type filesClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesClient(cc grpc.ClientConnInterface) FilesClient {
	return &filesClient{cc}
}

func (c *filesClient) Add(ctx context.Context, in *FileAddRequest, opts ...grpc.CallOption) (*FileAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileAddResponse)
	err := c.cc.Invoke(ctx, Files_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) GetSecret(ctx context.Context, in *FileSecretRequest, opts ...grpc.CallOption) (*FileSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileSecretResponse)
	err := c.cc.Invoke(ctx, Files_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Search(ctx context.Context, in *FileSearchRequest, opts ...grpc.CallOption) (*FileSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileSearchResponse)
	err := c.cc.Invoke(ctx, Files_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesClient) Remove(ctx context.Context, in *FileRemoveRequest, opts ...grpc.CallOption) (*FileRemoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileRemoveResponse)
	err := c.cc.Invoke(ctx, Files_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesServer is the server API for Files service.
// All implementations must embed UnimplementedFilesServer
// for forward compatibility.
type FilesServer interface {
	Add(context.Context, *FileAddRequest) (*FileAddResponse, error)
	GetSecret(context.Context, *FileSecretRequest) (*FileSecretResponse, error)
	Search(context.Context, *FileSearchRequest) (*FileSearchResponse, error)
	Remove(context.Context, *FileRemoveRequest) (*FileRemoveResponse, error)
	mustEmbedUnimplementedFilesServer()
}

// UnimplementedFilesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesServer struct{}

func (UnimplementedFilesServer) Add(context.Context, *FileAddRequest) (*FileAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedFilesServer) GetSecret(context.Context, *FileSecretRequest) (*FileSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedFilesServer) Search(context.Context, *FileSearchRequest) (*FileSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFilesServer) Remove(context.Context, *FileRemoveRequest) (*FileRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedFilesServer) mustEmbedUnimplementedFilesServer() {}
func (UnimplementedFilesServer) testEmbeddedByValue()               {}

// UnsafeFilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesServer will
// result in compilation errors.
type UnsafeFilesServer interface {
	mustEmbedUnimplementedFilesServer()
}

func RegisterFilesServer(s grpc.ServiceRegistrar, srv FilesServer) {
	// If the following call pancis, it indicates UnimplementedFilesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Files_ServiceDesc, srv)
}

func _Files_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Add(ctx, req.(*FileAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).GetSecret(ctx, req.(*FileSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Search(ctx, req.(*FileSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Files_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Files_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesServer).Remove(ctx, req.(*FileRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Files_ServiceDesc is the grpc.ServiceDesc for Files service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Files_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "files.Files",
	HandlerType: (*FilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Files_Add_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Files_GetSecret_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Files_Search_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Files_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "files/files.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: notes/notes.proto

package notesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Notes_Add_FullMethodName       = "/notes.Notes/Add"
	Notes_GetSecret_FullMethodName = "/notes.Notes/GetSecret"
	Notes_Search_FullMethodName    = "/notes.Notes/Search"
	Notes_Remove_FullMethodName    = "/notes.Notes/Remove"
)

// NotesClient is the client API for Notes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotesClient interface {
	Add(ctx context.Context, in *NoteAddRequest, opts ...grpc.CallOption) (*NoteAddResponse, error)
	GetSecret(ctx context.Context, in *NoteSecretRequest, opts ...grpc.CallOption) (*NoteSecretResponse, error)
	Search(ctx context.Context, in *NoteSearchRequest, opts ...grpc.CallOption) (*NoteSearchResponse, error)
	Remove(ctx context.Context, in *NoteRemoveRequest, opts ...grpc.CallOption) (*NoteRemoveResponse, error)
}

type notesClient struct {
	cc grpc.ClientConnInterface
}

func NewNotesClient(cc grpc.ClientConnInterface) NotesClient {
	return &notesClient{cc}
}

func (c *notesClient) Add(ctx context.Context, in *NoteAddRequest, opts ...grpc.CallOption) (*NoteAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteAddResponse)
	err := c.cc.Invoke(ctx, Notes_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) GetSecret(ctx context.Context, in *NoteSecretRequest, opts ...grpc.CallOption) (*NoteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteSecretResponse)
	err := c.cc.Invoke(ctx, Notes_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) Search(ctx context.Context, in *NoteSearchRequest, opts ...grpc.CallOption) (*NoteSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteSearchResponse)
	err := c.cc.Invoke(ctx, Notes_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) Remove(ctx context.Context, in *NoteRemoveRequest, opts ...grpc.CallOption) (*NoteRemoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteRemoveResponse)
	err := c.cc.Invoke(ctx, Notes_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotesServer is the server API for Notes service.
// All implementations must embed UnimplementedNotesServer
// for forward compatibility.
type NotesServer interface {
	Add(context.Context, *NoteAddRequest) (*NoteAddResponse, error)
	GetSecret(context.Context, *NoteSecretRequest) (*NoteSecretResponse, error)
	Search(context.Context, *NoteSearchRequest) (*NoteSearchResponse, error)
	Remove(context.Context, *NoteRemoveRequest) (*NoteRemoveResponse, error)
	mustEmbedUnimplementedNotesServer()
}

// UnimplementedNotesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotesServer struct{}

func (UnimplementedNotesServer) Add(context.Context, *NoteAddRequest) (*NoteAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedNotesServer) GetSecret(context.Context, *NoteSecretRequest) (*NoteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedNotesServer) Search(context.Context, *NoteSearchRequest) (*NoteSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedNotesServer) Remove(context.Context, *NoteRemoveRequest) (*NoteRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedNotesServer) mustEmbedUnimplementedNotesServer() {}
func (UnimplementedNotesServer) testEmbeddedByValue()               {}

// UnsafeNotesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotesServer will
// result in compilation errors.
type UnsafeNotesServer interface {
	mustEmbedUnimplementedNotesServer()
}

func RegisterNotesServer(s grpc.ServiceRegistrar, srv NotesServer) {
	// If the following call pancis, it indicates UnimplementedNotesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Notes_ServiceDesc, srv)
}

func _Notes_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notes_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).Add(ctx, req.(*NoteAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notes_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).GetSecret(ctx, req.(*NoteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notes_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).Search(ctx, req.(*NoteSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notes_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).Remove(ctx, req.(*NoteRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Notes_ServiceDesc is the grpc.ServiceDesc for Notes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notes.Notes",
	HandlerType: (*NotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Notes_Add_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Notes_GetSecret_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Notes_Search_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Notes_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notes/notes.proto",
}

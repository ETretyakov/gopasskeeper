// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: cards/cards.proto

package cardsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cards_Add_FullMethodName       = "/cards.Cards/Add"
	Cards_GetSecret_FullMethodName = "/cards.Cards/GetSecret"
	Cards_Search_FullMethodName    = "/cards.Cards/Search"
	Cards_Remove_FullMethodName    = "/cards.Cards/Remove"
)

// CardsClient is the client API for Cards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsClient interface {
	Add(ctx context.Context, in *CardAddRequest, opts ...grpc.CallOption) (*CardAddResponse, error)
	GetSecret(ctx context.Context, in *CardSecretRequest, opts ...grpc.CallOption) (*CardSecretResponse, error)
	Search(ctx context.Context, in *CardSearchRequest, opts ...grpc.CallOption) (*CardSearchResponse, error)
	Remove(ctx context.Context, in *CardRemoveRequest, opts ...grpc.CallOption) (*CardRemoveResponse, error)
}

type cardsClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsClient(cc grpc.ClientConnInterface) CardsClient {
	return &cardsClient{cc}
}

func (c *cardsClient) Add(ctx context.Context, in *CardAddRequest, opts ...grpc.CallOption) (*CardAddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardAddResponse)
	err := c.cc.Invoke(ctx, Cards_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) GetSecret(ctx context.Context, in *CardSecretRequest, opts ...grpc.CallOption) (*CardSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardSecretResponse)
	err := c.cc.Invoke(ctx, Cards_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) Search(ctx context.Context, in *CardSearchRequest, opts ...grpc.CallOption) (*CardSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardSearchResponse)
	err := c.cc.Invoke(ctx, Cards_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) Remove(ctx context.Context, in *CardRemoveRequest, opts ...grpc.CallOption) (*CardRemoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardRemoveResponse)
	err := c.cc.Invoke(ctx, Cards_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardsServer is the server API for Cards service.
// All implementations must embed UnimplementedCardsServer
// for forward compatibility.
type CardsServer interface {
	Add(context.Context, *CardAddRequest) (*CardAddResponse, error)
	GetSecret(context.Context, *CardSecretRequest) (*CardSecretResponse, error)
	Search(context.Context, *CardSearchRequest) (*CardSearchResponse, error)
	Remove(context.Context, *CardRemoveRequest) (*CardRemoveResponse, error)
	mustEmbedUnimplementedCardsServer()
}

// UnimplementedCardsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardsServer struct{}

func (UnimplementedCardsServer) Add(context.Context, *CardAddRequest) (*CardAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCardsServer) GetSecret(context.Context, *CardSecretRequest) (*CardSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedCardsServer) Search(context.Context, *CardSearchRequest) (*CardSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedCardsServer) Remove(context.Context, *CardRemoveRequest) (*CardRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedCardsServer) mustEmbedUnimplementedCardsServer() {}
func (UnimplementedCardsServer) testEmbeddedByValue()               {}

// UnsafeCardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsServer will
// result in compilation errors.
type UnsafeCardsServer interface {
	mustEmbedUnimplementedCardsServer()
}

func RegisterCardsServer(s grpc.ServiceRegistrar, srv CardsServer) {
	// If the following call pancis, it indicates UnimplementedCardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cards_ServiceDesc, srv)
}

func _Cards_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Add(ctx, req.(*CardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).GetSecret(ctx, req.(*CardSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Search(ctx, req.(*CardSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Remove(ctx, req.(*CardRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cards_ServiceDesc is the grpc.ServiceDesc for Cards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cards.Cards",
	HandlerType: (*CardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Cards_Add_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Cards_GetSecret_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Cards_Search_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Cards_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cards/cards.proto",
}
